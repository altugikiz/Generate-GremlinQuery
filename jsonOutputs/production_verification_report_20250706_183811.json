{
  "timestamp": "2025-07-06T18:38:11.724298",
  "base_url": "http://localhost:8000",
  "total_time_seconds": 41.58270525932312,
  "statistics": {
    "total_tests": 21,
    "passed": 16,
    "failed": 0,
    "warnings": 5,
    "success_rate": 76.19047619047619
  },
  "production_ready": false,
  "test_suites": [
    {
      "name": "Health & Status",
      "total_tests": 2,
      "passed": 2,
      "failed": 0,
      "warnings": 0,
      "success_rate": 100.0,
      "results": [
        {
          "name": "System Health Check",
          "status": "TestStatus.PASS",
          "execution_time_ms": 273.4353542327881,
          "details": "All components healthy: ['gremlin', 'vector_store', 'rag_pipeline']",
          "response_data": {
            "status": "healthy",
            "timestamp": "2025-07-06T18:37:30.417136",
            "components": {
              "gremlin": "healthy",
              "vector_store": "healthy",
              "rag_pipeline": "healthy"
            },
            "version": "1.0.0",
            "uptime_seconds": 351.30320715904236,
            "development_mode": false
          },
          "error": null
        },
        {
          "name": "Detailed Health Check",
          "status": "TestStatus.PASS",
          "execution_time_ms": 8.687257766723633,
          "details": "Detailed health information available",
          "response_data": {
            "timestamp": "2025-07-06T18:37:30.420862",
            "uptime_seconds": 351.30694460868835,
            "services": {
              "gremlin": {
                "status": "error",
                "error": "'SyncGremlinClient' object has no attribute 'get_statistics'"
              },
              "vector_store": {
                "status": "ready",
                "statistics": {
                  "is_initialized": true,
                  "document_count": 0,
                  "index_size": 0,
                  "embedding_dimension": 384,
                  "search_count": 0,
                  "total_search_time_ms": 0.0,
                  "average_search_time_ms": 0.0,
                  "index_count": 0,
                  "model_name": "all-MiniLM-L6-v2"
                }
              },
              "rag_pipeline": {
                "status": "ready",
                "statistics": {
                  "pipeline": {
                    "search_count": 0,
                    "total_search_time_ms": 0.0,
                    "average_search_time_ms": 0.0,
                    "query_translation_count": 0,
                    "total_translation_time_ms": 0.0,
                    "average_translation_time_ms": 0.0,
                    "model_provider": "gemini",
                    "llm_model": "gemini-2.0-flash",
                    "max_graph_results": 10,
                    "max_semantic_results": 5,
                    "development_mode": false
                  },
                  "gremlin": {
                    "error": "'SyncGremlinClient' object has no attribute 'get_statistics'"
                  },
                  "vector_store": {
                    "is_initialized": true,
                    "document_count": 0,
                    "index_size": 0,
                    "embedding_dimension": 384,
                    "search_count": 0,
                    "total_search_time_ms": 0.0,
                    "average_search_time_ms": 0.0,
                    "index_count": 0,
                    "model_name": "all-MiniLM-L6-v2"
                  },
                  "vector_retriever": {
                    "is_initialized": true,
                    "document_count": 0,
                    "index_size": 0,
                    "embedding_dimension": 384,
                    "search_count": 0,
                    "total_search_time_ms": 0.0,
                    "average_search_time_ms": 0.0,
                    "index_count": 0,
                    "model_name": "all-MiniLM-L6-v2"
                  }
                }
              }
            },
            "system": {
              "cpu_percent": 5.3,
              "memory_percent": 75.2,
              "process_memory_mb": 569.15234375,
              "process_cpu_percent": 0.0,
              "disk_usage_percent": 65.7
            },
            "performance": {}
          },
          "error": null
        }
      ]
    },
    {
      "name": "Gremlin Translation",
      "total_tests": 5,
      "passed": 4,
      "failed": 0,
      "warnings": 1,
      "success_rate": 80.0,
      "results": [
        {
          "name": "Turkish Hotel Query",
          "status": "TestStatus.WARN",
          "execution_time_ms": 3755.9847831726074,
          "details": "Query missing elements: ['valueMap', 'hotel_name']",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Hotel').has('country', 'Turkey').values('name').limit(10)",
            "explanation": "Okay, let's break down the Gremlin query: `g.V().hasLabel('Hotel').has('country', 'Turkey').values('name').limit(10)`\n\n1. **What this query is looking for:**\n\n   This query aims to find the names of hotels located in Turkey.  It's essentially asking: \"Give me a list of hotel names, but only for hotels in Turkey, and don't give me more than 10 of them.\"\n\n2. **How it traverses the graph:**\n\n   *   `g.V()`:  Starts the traversal by considering all vertices (nodes) in the graph.\n   *   `hasLabel('Hotel')`:  Filters the vertices, selecting only those that are labeled as \"Hotel\". This narrows down the search to only hotel nodes.\n   *   `has('country', 'Turkey')`: Further filters the \"Hotel\" vertices, keeping only those where the \"country\" property is equal to \"Turkey\".  This selects hotels specifically located in Turkey.\n   *   `values('name')`:  Extracts the value of the \"name\" property from each of the selected \"Hotel\" vertices.  This means it gets the name of each hotel in Turkey.\n   *   `limit(10)`: Restricts the number of results to a maximum of 10.  This ensures that the query returns at most 10 hotel names.\n\n3. **What results it will return:**\n\n   The query will return a list of the names of up to 10 hotels that are located in Turkey.  Each item in the list will be a string representing the name of a hotel.  If there are fewer than 10 hotels in Turkey in the graph, it will return all of them. If there are more than 10, it will return an arbitrary set of 10.",
            "confidence_score": 0.9,
            "execution_time_ms": 3753.1349658966064
          },
          "error": null
        },
        {
          "name": "English Cleanliness Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 6183.030366897583,
          "details": "Generated valid Gremlin query: g.V().hasLabel('Hotel').as('hotel').inE('HAS_REVIEW').outV().hasLabel('Review').as('review').inE('HA...",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Hotel').as('hotel').inE('HAS_REVIEW').outV().hasLabel('Review').as('review').inE('HAS_ANALYSIS').outV().hasLabel('Analysis').as('analysis').outE('ANALYZES_ASPECT').inV().hasLabel('Aspect').has('name', 'cleanliness').select('hotel').limit(10)",
            "explanation": "Okay, let's break down that Gremlin query:\n\n**1. What this query is looking for:**\n\nThe query aims to find hotels that have reviews where the AI-based analysis of those reviews specifically highlights the \"cleanliness\" aspect.  It essentially wants to identify hotels known (through review analysis) for their cleanliness.  Critically, it only wants to return the *hotel* itself, not the reviews or analysis. It limits the output to 10 hotels.\n\n**2. How it traverses the graph:**\n\nThe query works step-by-step, traversing the graph based on the defined schema and relationships:\n\n*   `g.V().hasLabel('Hotel').as('hotel')`:  It starts by selecting all vertices (nodes) with the label 'Hotel'. It then aliases these nodes as 'hotel' for later use. This is the starting point of our search.\n\n*   `.inE('HAS_REVIEW').outV().hasLabel('Review').as('review')`: It then finds all incoming edges labeled 'HAS_REVIEW' to these hotel vertices.  This means it's finding the edges that connect reviews *to* the hotels. Then, it moves *out* of those edges (`outV()`) to the vertices on the other end of the edge which are the 'Review' vertices and labels them as 'review'.  Effectively, this gets all reviews associated with the hotels.\n\n*   `.inE('HAS_ANALYSIS').outV().hasLabel('Analysis').as('analysis')`: Next, from each 'review', it finds the incoming edges labeled 'HAS_ANALYSIS'. Then, it moves *out* of those edges (`outV()`) to the vertices on the other end of the edge which are the 'Analysis' vertices and labels them as 'analysis'. This gets the AI analysis results associated with each review.\n\n*   `.outE('ANALYZES_ASPECT').inV().hasLabel('Aspect').has('name', 'cleanliness')`:  It finds outgoing edges labeled 'ANALYZES_ASPECT' from the analysis vertices. Then, it moves *out* of those edges (`inV()`) to the vertices on the other end of the edge which are the 'Aspect' vertices.  It then filters these 'Aspect' vertices, keeping only those where the 'name' property is 'cleanliness'. This ensures we're only considering analyses that specifically mention cleanliness.\n\n*   `.select('hotel')`: This step is crucial. After traversing all the relationships and filtering for \"cleanliness\", this tells Gremlin that we only want to return the 'hotel' vertices that satisfied the whole traversal path. We are going back to the original hotel node, and discarding the review, analysis, and aspect information.\n\n*   `.limit(10)`: Finally, it limits the number of results returned to 10.  This prevents the query from returning a huge list of hotels.\n\n**3. What results it will return:**\n\nThe query will return a list of at most 10 hotel vertices (nodes) that have reviews where an AI analysis identified the \"cleanliness\" aspect.  The result will be the hotel vertex itself, allowing you to access its properties (name, address, etc.). If fewer than 10 hotels meet the criteria, it will return all of them.",
            "confidence_score": 0.9,
            "execution_time_ms": 6180.763721466064
          },
          "error": null
        },
        {
          "name": "Turkish VIP Guest Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 5043.007850646973,
          "details": "Generated valid Gremlin query: g.V().hasLabel('Reviewer').has('traveler_type', 'VIP').out('WROTE').has('text', containing('sorun'))...",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Reviewer').has('traveler_type', 'VIP').out('WROTE').has('text', containing('sorun')).valueMap().limit(10)",
            "explanation": "Okay, let's break down this Gremlin query: `g.V().hasLabel('Reviewer').has('traveler_type', 'VIP').out('WROTE').has('text', containing('sorun')).valueMap().limit(10)`\n\n1.  **What this query is looking for:**\n\nThe query aims to find information about reviews written by VIP reviewers that contain the word \"sorun\" and then display the review details.  \"sorun\" is likely a Turkish word meaning \"problem\". So the query probably looks for VIP reviewers complaining about problems.\n\n2.  **How it traverses the graph:**\n\n*   `g.V()`:  Starts the traversal at all vertices in the graph.\n*   `hasLabel('Reviewer')`: Filters the vertices, keeping only those labeled as 'Reviewer'. So, now we're looking at all the reviewer nodes.\n*   `has('traveler_type', 'VIP')`:  Further filters the reviewer vertices, keeping only those where the `traveler_type` property is equal to 'VIP'. We're now looking at nodes representing VIP reviewers.\n*   `out('WROTE')`:  Traverses outgoing edges labeled 'WROTE' from the VIP reviewer vertices.  This moves us from the reviewers to the reviews they wrote.\n*   `has('text', containing('sorun'))`: Filters the reviews, keeping only those whose `text` property (the review content) *contains* the word \"sorun\".\n*   `valueMap()`:  For each of the remaining review vertices, it retrieves *all* the properties (key-value pairs) associated with those vertices in a map format.\n*   `limit(10)`: Restricts the number of results returned to a maximum of 10. This is important to avoid overwhelming the output with too much data.\n\n3.  **What results it will return:**\n\nThe query will return a list of up to 10 maps. Each map represents a review written by a VIP reviewer that contains the word \"sorun\" in its text. Each map will contain all the properties of that review node (e.g., `id`, `score`, `title`, `text`, `created_at`, `stay_date`, etc.). Effectively, it's giving us detailed information about those specific reviews.",
            "confidence_score": 0.9,
            "execution_time_ms": 5040.477752685547
          },
          "error": null
        },
        {
          "name": "English Rating Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 3973.161220550537,
          "details": "Generated valid Gremlin query: g.V().hasLabel('Hotel').has('star_rating', gte(4.5)).limit(10)...",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Hotel').has('star_rating', gte(4.5)).limit(10)",
            "explanation": "Here's a breakdown of the Gremlin query:\n\n1.  **What this query is looking for:**\n\nThe query aims to find highly-rated hotels (those with a star rating of 4.5 or higher) within the graph database. It also limits the number of results returned to the first 10 it finds.\n\n2.  **How it traverses the graph:**\n\n*   `g.V()`:  Starts the graph traversal by considering all vertices (nodes) in the graph.\n*   `hasLabel('Hotel')`:  Filters the vertices, keeping only those that are labeled as 'Hotel'.  This narrows down the search to only consider hotel nodes.\n*   `has('star_rating', gte(4.5))`: Further filters the 'Hotel' vertices, keeping only those where the 'star_rating' property is greater than or equal to 4.5. This selects hotels with a rating of 4.5 stars or higher.\n*   `limit(10)`: Restricts the number of results returned to a maximum of 10 hotels. This is useful for performance and displaying results in a manageable way.\n\n3.  **What results it will return:**\n\nThe query will return a maximum of 10 hotel vertices that have a star rating of 4.5 or higher. Each returned vertex represents a hotel, and you could then use `valueMap()` or `values()` on the results to access the properties (name, address, etc.) of these highly-rated hotels.",
            "confidence_score": 0.9,
            "execution_time_ms": 3969.8545932769775
          },
          "error": null
        },
        {
          "name": "Turkish Complex Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 4947.772264480591,
          "details": "Generated valid Gremlin query: g.V().hasLabel('Review').has('created_at',P.gte(java.time.LocalDateTime.now().minusMonths(1))).has('...",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Review').has('created_at',P.gte(java.time.LocalDateTime.now().minusMonths(1))).has('score',P.lte(4)).limit(10)",
            "explanation": "Okay, let's break down the Gremlin query:\n\n**1. What this query is looking for:**\n\nThe query aims to find up to 10 reviews that meet the following criteria:\n\n*   The review was created within the last month.\n*   The review has a score of 4 or less (indicating a poor rating).\n\n**2. How it traverses the graph:**\n\n*   `g.V()`: Starts the traversal by considering all vertices (nodes) in the graph.\n*   `hasLabel('Review')`:  Filters the vertices to only include those labeled as 'Review'. This means we are only looking at review nodes.\n*   `has('created_at', P.gte(java.time.LocalDateTime.now().minusMonths(1)))`: Further filters the reviews to only include those whose `created_at` property is greater than or equal to (meaning after) one month ago from the current date and time.  `java.time.LocalDateTime.now().minusMonths(1)` calculates the date and time one month prior to the present. `P.gte()` is a predicate that means \"greater than or equal to\".\n*   `has('score', P.lte(4))`: Further refines the selection to only include reviews whose `score` property is less than or equal to 4. `P.lte()` is a predicate that means \"less than or equal to\".\n*   `limit(10)`: Limits the number of results returned to a maximum of 10.  Even if there are more than 10 reviews that meet the criteria, only the first 10 found will be returned.\n\n**3. What results it will return:**\n\nThe query will return up to 10 review nodes that were created within the past month and have a score of 4 or less. Each result will be a vertex (node) representing a review, with all its associated properties (e.g., id, score, title, text, created\\_at, etc.).",
            "confidence_score": 0.9,
            "execution_time_ms": 4944.662570953369
          },
          "error": null
        }
      ]
    },
    {
      "name": "Gremlin Execution",
      "total_tests": 5,
      "passed": 5,
      "failed": 0,
      "warnings": 0,
      "success_rate": 100.0,
      "results": [
        {
          "name": "Hotel Count Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 611.6406917572021,
          "details": "Returned 1 results",
          "response_data": {
            "query": "g.V().hasLabel('Hotel').count()",
            "results": [
              2
            ],
            "results_count": 1,
            "execution_time_ms": 609.3881130218506,
            "timestamp": 1751816274.9458733
          },
          "error": null
        },
        {
          "name": "Hotel Names Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 500.3199577331543,
          "details": "Returned 2 results",
          "response_data": {
            "query": "g.V().hasLabel('Hotel').limit(5).valueMap('hotel_name')",
            "results": [
              {
                "hotel_name": [
                  "AKKA CLAROS"
                ]
              },
              {
                "hotel_name": [
                  "AKKA SUITES"
                ]
              }
            ],
            "results_count": 2,
            "execution_time_ms": 497.7729320526123,
            "timestamp": 1751816275.4471076
          },
          "error": null
        },
        {
          "name": "Review Count Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 462.277889251709,
          "details": "Returned 1 results",
          "response_data": {
            "query": "g.V().hasLabel('Review').count()",
            "results": [
              1809
            ],
            "results_count": 1,
            "execution_time_ms": 458.5440158843994,
            "timestamp": 1751816275.9091892
          },
          "error": null
        },
        {
          "name": "Edge Labels Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 2104.862928390503,
          "details": "Returned 10 results",
          "response_data": {
            "query": "g.E().label().dedup().limit(10)",
            "results": [
              "HAS_HOTEL",
              "HAS_LANGUAGE",
              "HAS_REVIEW",
              "HAS_ASPECT",
              "HAS_SOURCE",
              "HAS_ACCOMMODATION",
              "WRITTEN_IN",
              "HAS_ANALYSIS",
              "BELONGS_TO",
              "REFERS_TO"
            ],
            "results_count": 10,
            "execution_time_ms": 2101.8905639648438,
            "timestamp": 1751816278.0157034
          },
          "error": null
        },
        {
          "name": "Hotel-Review Relationship",
          "status": "TestStatus.PASS",
          "execution_time_ms": 457.0136070251465,
          "details": "Returned 3 results",
          "response_data": {
            "query": "g.V().hasLabel('Hotel').limit(1).out().hasLabel('Review').limit(3).valueMap()",
            "results": [
              {
                "link": [
                  "https://www.google.com/maps/reviews/data=!4m8!14m7!1m6!2m5!1sChdDSUhNMG9nS0VMRFhoTGJFcDkzWHdRRRAB!2m1!1s0x0:0xdf82a5495970c56e!3m1!1s2@1:CIHM0ogKELDXhLbEp93XwQE%7CCgwIhsq6wgYQwKaonAE%7C?hl=tr"
                ],
                "response_text": [
                  "Уважаемый Max,\n\nБлагодарим вас за выбор AKKA Hotels для вашего отдыха и за то, что поделились своими впечатлениями. Мы рады, что вы оценили комфорт, любезность нашего персонала и разнообразие блюд. В AKKA Hotels мы стремимся создать атмосферу, где наши гости могут отдохнуть от повседневной суеты, найти спокойствие и зарядиться энергией.\n\nМы с нетерпением ждем вашего следующего визита и уверены, что сможем снова оправдать ваши ожидания.\n\nС уважением,\nCRM AKKA Hotels\ncrm@akkahotels.com"
                ],
                "response_date": [
                  "2025-06-16T14:00:15.000Z"
                ],
                "response_flagged": [
                  true
                ],
                "review_text": [
                  "Побывав впервые в Турции, нам посоветовали именно этот отель для идеального отдыха с комфортом,любезным персоналом и оболденным разнообразием блюд.\nЯ пока что еще тут,но уверен что вернусь сюда снова и снова. Так держать ребята, держите свой уровень.!!!!"
                ],
                "hotel_id": [
                  "030553b1-8b67-42e0-9454-cbc16651ab79"
                ],
                "reviewer": [
                  "Max"
                ],
                "score": [
                  1
                ],
                "is_deleted": [
                  false
                ],
                "is_flagged": [
                  false
                ]
              },
              {
                "link": [
                  "https://www.google.com/maps/reviews/data=!4m8!14m7!1m6!2m5!1sChdDSUhNMG9nS0VQS3IwYU9BMTludDVBRRAB!2m1!1s0x0:0xdf82a5495970c56e!3m1!1s2@1:CIHM0ogKEPKr0aOA19nt5AE%7CCgsIutK2wgYQ8OShbA%7C?hl=tr"
                ],
                "response_text": [
                  "Уважаемый Андрей,\n\nБлагодарим вас за то, что выбрали AKKA Hotels для вашего отдыха и за то, что поделились своими впечатлениями. Мы рады, что вы оценили чистоту и состояние нашего номера, а также насладились прекрасными видами и уютом нашего отеля. Мы стремимся создать атмосферу, где наши гости могут отдохнуть от повседневной суеты, найти спокойствие и зарядиться энергией.\n\nВаши добрые слова о нашем персонале и кухне очень ценны для нас. Мы гордимся тем, что можем предложить разнообразные удобства, такие как бассейн, бар и пляж, чтобы сделать ваше пребывание незабываемым.\n\nБудем рады приветствовать вас снова в нашем отеле для вашего следующего отпуска.\n\nС уважением,\nCRM AKKA Hotels\ncrm@akkahotels.com"
                ],
                "response_date": [
                  "2025-06-13T12:43:44.000Z"
                ],
                "response_flagged": [
                  true
                ],
                "review_text": [
                  "Очень классный отель. Взяли двух этажный, номер ЧИСТЕЙШИЙ, без плесени в чутка потрепанным временем но хорошем состоянии. Виды из переднего окна прекрасны, балкон хоть и маленький, но зато уютный. Лестница немного крутая, поднимался только держась за перила. Лифт в хорошем состоянии, работает прекрасно, еда ОЧЕНЬ вкусная, повар иногда готовит на большом огне, в пешей доступности есть море, горы и торговые ряды. До моря идти 3 минуты пешим ходом, что очень хорошо, также в отеле все говорят в основном на русском. Персонал очень добрый и отзывчивый. На территории отеля бар, бассейн и две горки, сам не катался позже об этом напишу. В целом, отель шикарен для отдыха в одиночку или семьей. У отеля есть свой пляж с баром, можно взять водички и с 10:00 есть арбузы. В отеле много котиков которые ходят прям по территории, возле бассейна и в др местах. Разумеется есть и минусы, оправданные ценой, такие как: грязные полотенца, перегоревшие лампочки и д.р. Быть честным, хоть и не роскошь но это был один из ЛУЧШИХ отпусков в моей жизни."
                ],
                "hotel_id": [
                  "030553b1-8b67-42e0-9454-cbc16651ab79"
                ],
                "reviewer": [
                  "Андрей"
                ],
                "score": [
                  0.8
                ],
                "is_deleted": [
                  false
                ],
                "is_flagged": [
                  false
                ]
              },
              {
                "link": [
                  "https://www.google.com/maps/reviews/data=!4m8!14m7!1m6!2m5!1sChdDSUhNMG9nS0VLYUR1Y3FlNWF6bnpnRRAB!2m1!1s0x0:0xdf82a5495970c56e!3m1!1s2@1:CIHM0ogKEKaDucqe5aznzgE%7CCgwIj9ScwgYQuM3W_gI%7C?hl=tr"
                ],
                "response_text": [
                  "Уважаемый Егор,\n\nБлагодарим вас за выбор AKKA Hotels для вашего семейного отдыха и за то, что поделились своими впечатлениями. Мы рады, что вы и ваша мама смогли насладиться отдыхом и оценили наш отель, питание, обслуживание и анимацию. В AKKA Hotels мы стремимся создать атмосферу, где каждая семья может отдохнуть, насладиться спокойствием и зарядиться энергией.\n\nМы будем рады приветствовать вас и вашу семью снова для вашего следующего отпуска, чтобы вы могли вновь насладиться незабываемыми моментами вместе.\n\nС уважением,\nCRM AKKA Hotels\ncrm@akkahotels.com"
                ],
                "response_date": [
                  "2025-06-13T12:48:35.000Z"
                ],
                "response_flagged": [
                  true
                ],
                "review_text": [
                  "Отель классный,еда,обслуживание,аниматоры отличные ,с мамой хорошо отдохнули"
                ],
                "hotel_id": [
                  "030553b1-8b67-42e0-9454-cbc16651ab79"
                ],
                "reviewer": [
                  "Егор"
                ],
                "score": [
                  1
                ],
                "is_deleted": [
                  false
                ],
                "is_flagged": [
                  false
                ]
              }
            ],
            "results_count": 3,
            "execution_time_ms": 455.37710189819336,
            "timestamp": 1751816278.473395
          },
          "error": null
        }
      ]
    },
    {
      "name": "Semantic RAG Endpoints",
      "total_tests": 3,
      "passed": 2,
      "failed": 0,
      "warnings": 1,
      "success_rate": 66.66666666666666,
      "results": [
        {
          "name": "Semantic Ask Endpoint",
          "status": "TestStatus.PASS",
          "execution_time_ms": 1339.8778438568115,
          "details": "Generated answer (721 chars) with Gremlin query",
          "response_data": {
            "answer": "I couldn't find sufficient information to answer your question: \"What are the most common complaints about hotel cleanliness?\"\n\nSystem Status:\n- Generated Gremlin query: g.V().hasLabel('Aspect').has('name', 'cleanliness').in('ANALYZES_ASPECT').has('sentiment_score', lt(0)).in('HAS_ANALYSIS').out('HAS_REVIEW').values('text').limit(10)\n- Graph search results: 0 nodes found\n- Semantic search results: 0 documents found\n\nIssues detected:\n⚠️ No graph results found\n⚠️ No semantic results found\n\nPlease verify that:\n1. The Cosmos DB Gremlin API is accessible and contains data\n2. The vector store is properly initialized with indexed documents\n3. Your query is clear and relates to available data\n\nProcessing time: 1337.61ms",
            "query": "What are the most common complaints about hotel cleanliness?",
            "gremlin_query": null,
            "semantic_chunks": null,
            "context": null,
            "execution_time_ms": 1338.1540775299072,
            "component_times": {
              "total_execution": 1338.1540775299072,
              "query_translation": 0.0,
              "graph_search": 0.0,
              "semantic_search": 0.0,
              "response_generation": 1338.1540775299072
            },
            "development_mode": false
          },
          "error": null
        },
        {
          "name": "Vector Search Endpoint",
          "status": "TestStatus.WARN",
          "execution_time_ms": 2.496004104614258,
          "details": "No vector search results (may need indexed data)",
          "response_data": {
            "results": [],
            "query_embedding": null,
            "execution_time_ms": 0.23293495178222656,
            "total_documents": 0
          },
          "error": null
        },
        {
          "name": "Semantic Filter Endpoint",
          "status": "TestStatus.PASS",
          "execution_time_ms": 3553.215742111206,
          "details": "Executed filter query, got 2 results",
          "response_data": {
            "gremlin_query": "g.V().hasLabel('Hotel').limit(10).valueMap(true)",
            "results": [
              {
                "id": "030553b1-8b67-42e0-9454-cbc16651ab79",
                "label": "Hotel",
                "hotel_id": [
                  "030553b1-8b67-42e0-9454-cbc16651ab79"
                ],
                "hotel_name": [
                  "AKKA CLAROS"
                ]
              },
              {
                "id": "2e9e4dc6-a3b5-4c70-8372-becdd6107f5e",
                "label": "Hotel",
                "hotel_id": [
                  "2e9e4dc6-a3b5-4c70-8372-becdd6107f5e"
                ],
                "hotel_name": [
                  "AKKA SUITES"
                ]
              }
            ],
            "summary": "The query returned two hotels, AKKA CLAROS and AKKA SUITES, that have an average rating of 4.0 or higher based on available reviews. This indicates that these hotels are generally well-regarded and maintain a satisfactory level of guest experience. The AKKA brand seems to perform well.",
            "execution_time_ms": 3550.0054359436035
          },
          "error": null
        }
      ]
    },
    {
      "name": "Analytics Endpoints",
      "total_tests": 3,
      "passed": 0,
      "failed": 0,
      "warnings": 3,
      "success_rate": 0.0,
      "results": [
        {
          "name": "Hotel Average Ratings",
          "status": "TestStatus.WARN",
          "execution_time_ms": 3.0164718627929688,
          "details": "Endpoint not found (may not be implemented)",
          "response_data": {
            "detail": "Not Found"
          },
          "error": null
        },
        {
          "name": "Group Statistics",
          "status": "TestStatus.WARN",
          "execution_time_ms": 2.0427703857421875,
          "details": "Endpoint not found (may not be implemented)",
          "response_data": {
            "detail": "Not Found"
          },
          "error": null
        },
        {
          "name": "Source Statistics",
          "status": "TestStatus.WARN",
          "execution_time_ms": 2.0585060119628906,
          "details": "Endpoint not found (may not be implemented)",
          "response_data": {
            "detail": "Not Found"
          },
          "error": null
        }
      ]
    },
    {
      "name": "Error Handling",
      "total_tests": 3,
      "passed": 3,
      "failed": 0,
      "warnings": 0,
      "success_rate": 100.0,
      "results": [
        {
          "name": "Empty Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 3.6406517028808594,
          "details": "Correctly returned HTTP 422 for invalid input",
          "response_data": {
            "detail": [
              {
                "type": "missing",
                "loc": [
                  "body",
                  "prompt"
                ],
                "msg": "Field required",
                "input": {
                  "query": ""
                }
              }
            ]
          },
          "error": null
        },
        {
          "name": "Invalid Gremlin Query",
          "status": "TestStatus.PASS",
          "execution_time_ms": 8241.30392074585,
          "details": "Correctly returned HTTP 500 for invalid input",
          "response_data": {
            "detail": "Query execution failed: RetryError[<Future at 0x29453963310 state=finished raised GremlinServerError>]"
          },
          "error": null
        },
        {
          "name": "Missing Required Fields",
          "status": "TestStatus.PASS",
          "execution_time_ms": 2.2144317626953125,
          "details": "Correctly returned HTTP 422 for invalid input",
          "response_data": {
            "detail": [
              {
                "type": "missing",
                "loc": [
                  "body",
                  "query"
                ],
                "msg": "Field required",
                "input": {}
              }
            ]
          },
          "error": null
        }
      ]
    }
  ],
  "critical_failures": []
}